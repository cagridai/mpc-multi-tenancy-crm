generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  plan      String   @default("free")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User[]
  companies  Company[]
  contacts   Contact[]
  deals      Deal[]
  activities Activity[]
  notes      Note[]

  @@map("tenants")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  deals      Deal[]
  activities Activity[]
  notes      Note[]

  @@map("users")
}

model Company {
  id          String        @id @default(cuid())
  name        String
  industry    String?
  website     String?
  phone       String?
  email       String?
  address     String?
  size        CompanySize?
  status      CompanyStatus @default(ACTIVE)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  contacts   Contact[]
  deals      Deal[]
  activities Activity[]
  notes      Note[]

  @@map("companies")
}

model Contact {
  id        String        @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  position  String?
  status    ContactStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  deals      Deal[]
  activities Activity[]
  notes      Note[]

  @@map("contacts")
}

model Deal {
  id          String     @id @default(cuid())
  title       String
  value       Float      @default(0)
  currency    String     @default("USD")
  stage       DealStage  @default(PROSPECTING)
  status      DealStatus @default(OPEN)
  probability Int        @default(0)
  closeDate   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id])

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  activities Activity[]
  notes      Note[]

  @@map("deals")
}

model Activity {
  id          String         @id @default(cuid())
  title       String
  description String?
  type        ActivityType
  status      ActivityStatus @default(PLANNED)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  assignedToId String
  assignedTo   User   @relation(fields: [assignedToId], references: [id])

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  dealId String?
  deal   Deal?   @relation(fields: [dealId], references: [id])

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id])

  @@map("activities")
}

model Note {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id])

  dealId String?
  deal   Deal?   @relation(fields: [dealId], references: [id])

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@map("notes")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  PROSPECT
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  PROSPECT
}

enum DealStage {
  PROSPECTING
  QUALIFICATION
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum DealStatus {
  OPEN
  WON
  LOST
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  TASK
  NOTE
}

enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
